import SecondLesson, ThirdLesson, random, numpy
from scipy.stats import rv_discrete
def randomized_motif_search(reads, k, t):
    motifs = []
    best_score = 10000000
    for read in reads:
        i = random.randint(0, len(read) - k)
        #print(i)
        kmer = read[i: i + k]
        motifs.append(kmer)
    best_motifs = motifs
    while True:
        profile = ThirdLesson.make_profile_w_Laplas_rule(motifs, k)
        motifs = []
        score = 0
        con_motif = ThirdLesson.consensus_str(profile)
        for read in reads:
            #print(motif, read)
            #score += ThirdLesson.distance2(motif, read)
            #score += ThirdLesson.profile_dist(motif, profile)
            motif = ThirdLesson.profile_most_probable_kmer(read, k, profile)
            motifs.append(motif)
            score += SecondLesson.hammingDist(motif, con_motif)
        if score < best_score:
            best_motifs = motifs
            best_score = score
        else:
            return best_motifs, best_score

print("FourthLesson")
reads = '''TCTCGGGG
           CCAAGGTG
           TACAGGCG
           TTCAGGTG
           TCCACGTG'''.split()
#profile = ThirdLesson.make_profile_w_Laplas_rule(reads, 8)
motifs = []
score = 0
#con_motif = ThirdLesson.consensus_str(profile)
#print(profile)
#print(con_motif)
#for read in reads:
    # print(motif, read)
    # score += ThirdLesson.distance2(motif, read)
    # score += ThirdLesson.profile_dist(motif, profile)
#    motif = ThirdLesson.profile_most_probable_kmer(read, 8, profile)
#    motifs.append(motif)
#    score += SecondLesson.hammingDist(motif, con_motif)
#print(score)
reads = '''CGCCCCTCTCGGGGGTGTTCAGTAAACGGCCA
     GGGCGAGGTATGTGTAAGTGCCAAGGTGCCAG
     TAGTACCGAGACCGAAAGAAGTATACAGGCGT
     TAGATCAAGTTTCAGGTGCACGTCGGTGAACC
     AATCCACCAGCTCCACGTGCAATGTTGGCCTA'''.split()
reads = '''ACTGGGGATGCCTCATCAATTAGCGAGCTAGACGTTGGCCTGGTCTGCCTCTATTCCCTGTGCTTAGCCTCTGGCGAGGATACTGGGACTTCGTCCCAATTAGAAGTTTTTATAACGCGAACAGAGGGCGTTTTTAGACCTCTCAGCTGACATCGCGAAGTAACGCGGGCATCAGCCTCCCCGTTCTATAGGTCTACTGGGGATGCCTCA
TCAATTAGCGAGCTAGACGTTGGCCTGGTCTGCCTCTATTCCCTGTGCTTAGCCTCTGGCGAGGATACTGGGACTTCGTCCCAATTAGAAGTTTTTATAACGCGAACAGAGGGCGTTTTTAGACCTCTCAGCTGACATCGCGAAGTAAGGATGGGGCTTGTTGCGCGGGCATCAGCCTCCCCGTTCTATAGGTCTACTGGGGATGCCTCA
TCACGGTACAAGCGAGGCGGATCCCGAGCGTCCTGAGCTAGTATGTGTACAGCTCCTTTTCGGACGTATACCGCTTATGGTTAATTGTGGTCGCGACCACACTTTAACCCGATAGGGAGCACCTTTGTTGGTCGAGTATTCGTCAAGTCTCTTCCAACAATGCATGCGTACGTCCGGTAGCTTGAATCGTCTTTCTTTGCAATTCCATTT
ACGGTGCCCAGGGTCAGTGGCGCCAGTACGGGAGAATCTTCGTGGAATATCCAAAGCTATTCTTTGTCGGGTCTGCCGTTTGGGTCCCAGAAAGGTTTTACCTTCTATAGAAACTATGAATCCTGCGACCAGGGAGCAGGCCATTTGAACGGAAACCAAGCTACCTATCCGCTATGCCCGCAGATGTCGACAATACTTATCGACACAATT
TGACAACCCATGTTATGGGATCCATCTTCTAGCGTTCATCGGGTACGTAGTTCTCTGCAGCTAACTCCGTAAACCAAAAGTGACTCAGCTATAAGACTGGTATTGTTTCAGTTTCTTCGATAGTACCTAACTCACTGCATCCACTCAGTGGAGCCCACTTGTTGGTGATAGGCAAGCAAAGGTTAGCGAACCATTTACATTCCCCCTTAT
GCGACCTGACGTCTGCTCTATCGATCTATCTAGGACGCTCCGGGTCCCGCATACCGAGATGGACCTCTATACATTAACTGTACAACTTTATCGGTTTCCTGCACCTCAGATGCCGCTTCGCACGCCCGTTATTAAGATTTGTCCCATCGCTCTGAATTGAGAACGCGATTGCTCCGCAAGTAGTTGGAGCAGGCTCAATGTTTGACGGGA
TAGCGGCGAATATCGGACACGTGAGATGAAACAACTATCGTTCCTTATCCATGTGGACGAAACGCAGAGCACAGCCGGCGACTTATAGTACATATTAGGGGCATCCTAACGCTCTATGGAGCAGGGACGTTGCGATGAAGAAAATGAGCACACTAAGTGACTGACTAATTGTTCATTCGAGAGTTTGCTTGAACCTTCTGACCAGATGTC
TGGTGCGCGTGCTATTAAGAGAACTGCGTAGCCATATATATTGTGACGACCGGGGGCTCATTAGTGAACGGAGCAGGCTTAGCGTATTTATTGAATTCAACGGTTCGTTGACATGCATCCGCCATCGAAATCGAAAAAACGGTGCAAGCGTGAGAAGGCTTATCTTTGCTCCGCCAGTGGCACGCCTTCGGATTGCAGAGAGGACGTCCG
ATTTTGAGGGAAATCTCGATAACGTGTAGGTCAGAGAAAAGTGTATGTGACTGAGAAGACTAGGGATTTCGTACATACAGTGTCCTACAATAAGATGTAGGGTGCGAACATTGCAGGGGTTAGGCTTGTTGCGCACCGATGTTAACCAGACGATACAGTACCGGAATAGAAGCCAACCATCGACTATTGCCAATCTCGACGAGAACATTT
TGCTGTTACACCCGAATTAACAGAATAGCGATTTAATATACTGAGGAGCAGAAATGTTGTAACTTTCCTGTCAAGCATACCCAGGCTCCGCTGTTTGCAGCTTTCCAATGTTACGATATGCTCGCTAGATCTTTTTGGGGCTCTCTGGTCCATCGACGAGAGTGGAATGTGTACTAATAGGACTCCTAAAAGTACCGTGAACCCTCTTCA
CCATTCGACCTTTGCGGAGCTAGTTGCTCCGGAGCCTCCTTGTTGGCGCAATTAGAAGGGAAGGCCGCACGCCATCAATGGGACTCCCGGACTCGCCAGATCGGTCGCAGTCAGGGAGAAACTAGTTCATATCGGCATATTTAGGAGCAAAATTCTCTCCTGAGACTTTCTATACACCATAATCTACAGTGACAGACTTCCAGCCGTCTA
GTTCGTTCCGCGGTTTGGTCGTAGGAGTTAGCTTGTTGTGGCTGGCCTGCGGAATCACAGATTTACTTGAATGAGGATGGGGTCATGGTCCTAGAAACGCCAACTACTTGAGGCCGGAATCAGAATATAAAAGGCGAGCGGGCCACTTGTGCCAACACAAGCCGCTATCCGCATGGTGCGCCATAAACCGTTCAAACCGGGTGGCTGACT
CTAACAGAAAGCGCTCTCCGGCTCTATAGATTAGTTCAAGGGGTGGTTGGCGCACATTATGTCTCGCGTGACAGGCTTGTTGTCTCGCCCGAGGAGCAGGGCGACTAGCATTCTACCTCGGAGCTCTTCACCGTCCCTACCCATCTAACTATACGCCATCCCCCGACTCTTCGAGTAAGGGAGATGCAACCTCCTTGTGGCCATTCGCTT
AGACGAGTTGTCGAGCAGAGGTAGACGGGACGGTAGTGCTCGCTTAGAGAAGCATTACAAAGTCGCAGAGGTTATAACTTTTCATTTACAATTGGCGAGCCGCCTATTCTCTCGTGGCTCCGCGCCTAGCAAAAGAAAACGATAACCGGCGAAATGCTAGTTTATCGCTTTCGACGTAGCGGGCGATCAAGGCAAGCAGGCTTGTTAATC
GAAGGTACGGGGTTATGTACAAAAAGATAAACAGCCTTGCGTCGTCATACGCATTAACACCACACAGGAGTCGAAGGACGAACGAGGATCAGGTGGAGTCAGCTTGTTGGGGGAACGTATCTCCACGGTCAGTACCTGAATATTACACCGCGGTAAAGACACACATTTCGAGGCACGACCTTTACTAGGCTTACTTCGAATGCGTGTCGG
CAAATCCGGGGGTCCTACAGGGATTCACTTCAAGGTAAATGCTAACGAGACTGAATAGGTTATTGCATGCCGACTGTCCATGCGCAGCCAGATCGAATTCAAGGCACATTCGACTGTTGCCGCCCCCGCCATTAACCCAGAGTTCAAGGTTCGTCACAGGAGAGCTACGCCCTGCAGGCTTGTTGGGCTTACAAGCGTTCCAAGTCATGC
ACCCGCTACAGAGTATTCAGGTGATCAGGAGTCGAGAGACCCGGATGCGGCTTGTTGCCGCCCGTTGTTCACAGTGTATAGGGTCAGGAATAGTGCGTGGTCGGCTCTCGGAAAGAATATTCCTCGTGCAAGTCTCGACCGGTCGAAGAGCCGTTTTTGAGAATTCACTAATGTGACACTCGATGATTCGAAAGGCGTTAAATCTCGAAT
AGCGGCTAGTATCCCCACATAGAGTCAAACCCGAAGTTGCTTCAACTTTGGTCCGGTTAGGTCGACGTAGCTGCAGTCGTACGAATTTGCAAGTCTGAGTAGCTAGGGGTGCAACTGACCTCACGGCGAGCAGGCTTGTCTTTGACTATGCTGCGGGAACTTCCAATAAACAACTGCGATACTTGATAGCACTAGGCGCCAAGACATGCC
AGTAGGAGTCTGCGCACACTCACGCGCCGGATGAAATTTGGAGCAAGTAAATGATCGTATTGGAGCATATTTGTTGCTCCAGGGGCGTTGGTCTCGTCACGGTAGTAGTTTTTCAATGTAAACCTTGGGATCGAAGGACGTAGAGGGGATATAACGGTGTAGTACCGCATTGTAGCCGCGTGGATCTAGGATCACCTCCGAGCTTAAGTC
CGGCGTCTAATATCTCAACACTTGATATGTGCGCTCATTGCAGCGATCTAAAACATCAATTACTATTCCATATGAGCAAAATGAGGATGTGTAGATACAAAAATGGTGTCCTGCCGTAATCCTTTCAAGTGCTATCGGAGCAGGCTTGAGCCGAAATAAGTTAGGAATAGCTTTGGCAACATGGAGTCGCTTCCCATATCAGGGCCAGTG'''.split()

best_score = 100000
best_motifs = []
#for i in range(1000):
##    motifs, score = randomized_motif_search(reads, 15, 20)
#    if score < best_score:
#        best_motifs = motifs
#        best_score = score
#        print(best_score)
#for i in best_motifs:
#    print(i)
#print(*best_motifs, best_score)

#print((1 - ((600-15)/(600-15+1))**10 - (10/(600-15+1))*((600-15)/(600-15+1))**9))
#print((1 - ((600-15)/(600-15+1))**10))
#print((10/(600-15+1))**10)


def biased_random(values, p_matrix, size):
    s = sum(p_matrix)
    #print(p_matrix)
    if s != 1:
        p_matrix = [p/s for p in p_matrix[:]]
        #print("p_matrix")
        #print(sum(p_matrix))
    res = []
    kmer = numpy.random.choice(values, p=p_matrix)
    #distrib = rv_discrete(values=(range(len(values)), p_matrix))  # This defines a Scipy probability distribution
    #distrib = distrib.rvs(size=size)  # 10 samples from range(len(values))
    #print(sum(p_matrix), distrib, values[distrib[0]])
    return kmer

def profile_rand_gen_kmer(profile, read, k):
    values = [read[i:i + k] for i in range(len(read) - k + 1)]
    p_matrix = [ThirdLesson.profile_dist(kmer, profile) for kmer in values]
    kmer = biased_random(values, p_matrix, 1)
    return kmer



def gibbs_rand_motif_search(reads, k, t, N):
    motifs = []
    best_score = 10000000
    for read in reads:
        i = random.randint(0, len(read) - k)
        # print(i)
        kmer = read[i: i + k]
        motifs.append(kmer)
    best_motifs = motifs
    for j in range(N):
        i = random.randint(0, t - 1)
        #print(motifs, i )
        motifs_wihthout_imotif = [motifs[n] for n in range(t) if n != i]
        #print(motifs_wihthout_imotif)
        profile = ThirdLesson.make_profile_w_Laplas_rule2(motifs_wihthout_imotif, k)
        #print(profile_rand_gen_kmer(profile, reads[i], k))
        motifs[i] = profile_rand_gen_kmer(profile, reads[i], k)
        con_motif = ThirdLesson.consensus_str(profile)
        #print(con_motif)
        #print(motifs)
        score = sum([SecondLesson.hammingDist(motif, con_motif) for motif in motifs])
        if score < best_score:
            best_motifs = motifs
            best_score = score
        #else:
        #    return best_motifs, best_score
    return best_motifs, best_score

reads = """CAAAGTTTACGACTCTACGGAAGCGATATACTATTCCTAGTGCTCGGATCAGTAAGCAGTCAGTTCGAAGGAAGACCAATTAAGCTCGTTCCTTTACCCAGCCCAGCTGGATATTATCACCTTGATTTTACTGGCATCGGCTATGTGGCTAATATTTAACTGGGTTTTACCAGTACTTGCCATTAATGCGCTTCTCTTTCGAGAACTTACATCGCGCTTCACTCACACGGGTATCGAAACATTTGAACGCCCGAACATTGGTAATGCCAGAATGAACTAGTTACGGGTTCATTTTGTGAAAGTGAAGCCCAAAGTTTACGACTC
TACGGAAGCGATATACTATTCCTAGTGCTCGGATCAGTAAGCAGTCAGTTCGAAGGAAGACCAATTAAGCTCGTTCCTTTACCCAGCCCAGCTGGATATTATCACCTTGATTTTACTGGCATCGGCTATGTGGCTAATATTTAACTGGGTTTTACCAGTACTTGCCATTAATGCGCTTCTCTTTCGAGAACTTACATCGCGCTTCACTCGTGGGTTGTATCCTTACACGGGTATCGAAACATTTGAACGCCCGAACATTGGTAATGCCAGAATGAACTAGTTACGGGTTCATTTTGTGAAAGTGAAGCCCAAAGTTTACGACTC
ATTGGTGGGTCAGCTGCCCCGCCGATTATGGGATGAGCGATCCTTGTGGTTACCGCGATCCCTTTGGCCATTGGCCGGATCGCAACGGCCCGCGTGTCGTGTGTTCTGGGACCTTCGGTGGGCGTTACAGGAGATATCTCTTCGTTGCCGAATCGTATCGGCGGGTGATTCCAATGTATTTGAGGGTAATACCCGAATAAACAAGGATTTGCGCCCGGCCGGTCGATGGCCGAATAGCCCACTCCTCCTTAGGCAACTAAGAGTGAAAATCAAGGATCGTGGCATAGTGTTACTGGTTGAGTCGACATAATGCTATGGAACACT
CTTGTACCCTGATCCCGGCATGCGGGCGAGGGCCGGATGCGGCCGTCACGGCAGGTGGGGAATGGAAAAGTCAGATCTAATGCAAACATTATGGAAGCGGAGAGTTGCACGTGGGACACTCGGTACTCGACACATCCTCCCCCCAGTGCACGAGTGGTACGAACCGAGACACAAAACGTCGGTCTTGTGTTCTGTATCAGCTCGAACCGGGAATCAGAAACCTGATGAACCGATCACACGGAAAGCGCCCTATCACGAAACTATTAGGATAGTTTACGAGGCCGTTCTCACTTTAGTACCTGCACAATTGACGCCTTAGTCTGA
GAATCCTAGCTCGCGACGTGGCGAATCGGCGACCGACACTCTCACGGTATCAGTGCCACGACATCTTCTTGGTGTCCCGGCGGCGGGACCGTTGGACATGAGATTTTGGCAGGACGTGCTATCAGGATTTGAGTGCGTTGTATCCTTCGAATAAGACTGCATTCCATCATCCCTCGACTCATCTGGTGTCACCCGGTAGTGGGTCCGCCAGGAATTAGGCTAATAAGTCTTGTACCCGCTTGAGCCATTACGCGAAGTTTTCTTATTTGACGAAAAGCAAACACTCGGGGGAGGTCGTATCAGGCGCTGCAGGGCTCTCAGGAC
AAACTTAGCGTAATGGGGCAGCTAGTATATAGAGCCTCTAATCTTTGAGGCCGCGACGTGTGCTGGCTTCGCGTTCAGGGCAGGGTCCTATGGATCCGCGTATCATGGGTGTTCTGTTAACTTGAGCCCCCGACTGTTAAAAGCATGTCGCGCTGTCCATGGTCTTCTATCCAGTGGACGTACATCCCACTCGTATCTGAACGGTTAGTGACTATAACGTGTCCAGTACGGGTACGGTGTAGCTAACGGTTGACTCCTATCAGACGCGCGTCGAGTCGTTCCGTTCGACTCTTTTGTCGCTAACCTTGTCCTTTCATTGCATGT
TCTCGAGCTTTGTTAAGGGTCTCTTGCACATTCGGATCCAAGCCAGTAATGAAGGTTCTGTATCCTCTCTGCTCGAATGACCGATCCACGTAATCCAGGTTAACGGATCGCCTTCGAAAGGCACAGAGATTCTCATCCGTGGCGCCACCCCAGTTGGTGCGCACTCGGCATTTCGCACACGTAAAACGTTCCCGCGCGTATTCCTGCCCGTGCCTCGCACTTTCCCGAGAGGATCACGTCGATGTCCATACGCGTTGTGCGCAGATCTCAGACGGTTGAATCCGTGCACTTCACCTCCACACCGTCTGAGCAGGGCCAACTGGG
TTCAAGGTTGAGGCAAATGAACGGGCGGCTTAATGTTACGTTACGAGGTATCTACACTTAGGCAGGGGATCGTGCCTACGCTGGACACGCGAGAGTACTTGGCAGGGTAGTCAAGCTTCCTTTGGTATCCTGTGTGAGGTATCCTTTGAGGGCGCGCCAAAAGAATGCTCCTCAGAGTTATATTGACGCTAGTTTCGATTGTCTTCTATGACGCAGGAGGATGTCTACACAATAGACGCGGATAACGTAAAATATTCCTACGATTAGGATCTGAACCGCTAGGGTAGGATTTAGATTGAGCTGGGCACTTAACACATCTTGTGC
CTTAATTGATAAGCAGGCCGGGGGGACGTATATACTACGGGAGGGGGGAGCCCAACGATTAATTGCATCGACCGGAGACGCGATCGTTAAGGAGTTTCCCCCCGCGAATTTAAGTTCCATACACGAGATGTTTCACCGACGGAGCTGGTAGGCTACATCCGTTATCTACGTTACCTCGACACTTTGAATGGAAAGGAAGACAAAGCATTGTACCTCGCGTGTTCGCAATCCTTGGTGCCCTCATGCTATCCAGTTTGATCGGTGTTCACGTGCAGCACTCGACTCACTGCGTCGCCCTGCACGGTTGCCACGTGTTTTATTCAT
CTCCGAAAACTGTATACCGATCGTAGTCGAGGTCCTACCATAAGACTTATGACAACTTTACTTAGGTCGGATAGCGCCGCTGAATGCCGTGAAGCCAGTAGTCTGAAGCCCTATAACTGACGCTGCGGTGTAGGGGTCCCGGAGCAACCATGGCTGGCTTCACCACGCCTGAAACGATGGGTTCACCACGCACATTATACTATCAAAACTTTCTGTATCCTTGAGTGTGTACTACATTTCGCAGAACTTGGGCTTTACTCTGTTCTGCAGCGGTCTTTGCCCTTGGATATGAAATTAGAGAAGTGGGTACCTGCATGACCCGAT
ACGCCGTTGGACTGGCCCAATTAGTACTTCCGGTGATATTGTACAAAGCCGGTGTAAAGTCTCCTTGGACCGGGCCTTGTATCATGTTCCCGGGGGAGATAGCATGCTAATTGGTCGACGAACCGCGTGACGCTACATACTAACTATCGGTTGGCACCGCACGCGGAATACCCCCACCCTGGCGTCGGACTATGTATTCAAGCAGATGGTGGAGAGTAATGATGGATTTTCTTCGTGACCCCTGGTGTCCCGAAGGATACATGAAGGAATCTGTATCCTTCTAGGGACCTTGTCATTTCGTAATTACTAAGAGAGTTACGCCAC
GTGATGGGATAGTGACCGAAAGATTGACCGGTAGCACGAATAAGTCGGGATAAGCGGGACACTAGTCGATGCACGGCACTACGAGCGCCGGGAGATGCGTGGGGTCAATCGAGTTAACTGTATCCTTAGAGTAAGGTTAAGGGCAGCATGGACCGTCTTAGTTACGCCCACTGCTCCATTAACGTGTCATGTAGTGGGTGTTGTGTGAAGGTCCTGAATTCCCAAAATAGGTGAGAAACTCCGCTGCAGATGCAGTGCAGTCCGCTCGTACAATCCTCTGTCTTTGTCCATGCACAGCACATGCTCACTTAGCTCAGGCGCACG
ACTGTGCAACTGGCCAGCCGAAGTCTCCTCAATGATACTAGCATAAACCGAACTCGCCCCCGGCGATATTTGGGGTACCGTCCTAATTCATATGAGGCACGTGTTCTGTATAGATGCATTTGGCGGCATTGTTAATGAATGCCGTAGGTTGAATTTAGCTCGAGCCCGCAACTTTAATTTCTAGGGTACCTAGTAAGACGTACTTTTTCGTTCGACAATTGACTTGTGGGTTGCTCCCTAGCGGTAGGGCAGAGTCACCCGAATGCACCTAGCGAGGCCGGGCGTGTCCTACACTTGTGGGCTAAATCTCCTTTGGACTGTTTG
GATCAATTTAGGTGTTTTAGAGCATAATTCCAAAGGCAGTATGGGGCTATCAACTGAGGCCTGGCAACTACACCAACTGCACTTAGTTTCGGCCACTTGTGTTACCGTTTAAACTCTGTTTTGTGTTGGTTATCCTTTCTCGCTAAATGCGGTCCAAAAGAGAGTGCTCAGCGGGACCGACGCTGGTTCGAGACGCTATTCTCATTTCATAACATCTATAAGCGATTAAACGTTGATCCCCTTTCAACGTCGGGTGCCGGGTGTGCATACTCCACCAATCCCGCAAGTTGACCCGCCTGCCGGGTAGATCCGAATCGTCCGATT
AATAGGAAGTCCTAATCGGCTGAATTAACCTACCCTTGCGCATTAGTGTTCTCGGTCCTTTTGGCTTTGGCATGCTTTGTAAAGGAATAACTGGAACGGAGGGCCGTTAATACGCTAATATTCTGTTTTTCGCCTCCGAACCCTAAGTACGAATGTATCACACTGAAGTCGGCAACGTGCGCACGGGAGTCTCACAGTTGTGGCTCGGTTATGTATTTTAACTACAATTCGCTCACTCTAAGAAATCGCTTCAGGCACGCCATTATGAGCGACAACCGGACTGTTAATATTGTTTGCTGGCAAAAGTTACCGAATGAGGCGCTT
CCTTTGCCTGGTGTTCGCAATCCTTTAACCCCAAGTGGGTTTACTCCTCTCGCCCCGGGTATACCAACCGAGCTCTAGATGCGGAAAAAGATCGGATGACCCGCTACGACGGCGAAATAATTTTGAGAGTTTAAGGGGGTTGAATAGCTGTGTCTTCCGTTATATAGACTTTCTCGTTTTTTGCGTGTCTTGATGACACCTATAGGTAGTACCGCAGGCCGAGCTGCACACCAGTCCGGATAGTACCGTCGTCGAGGATCAGATTCCGTAGCTACTATGCCATGGAGGACGACTTGCTTCCGCAAGAAGGTCTTTCTAGGTACC
AACCCGCCAATCTACTTTGACGAGGTTAAAATGCAACCACCCTCCTCGGACGTCTACATAGTAGTCATGCGCGCTACAAGGGGCTTTTCGAGACTCCGCCCGGTACTAGGACCTTTGGACATGCTATGGGGTACAATGGGGATGTTTCCTTTAAGATCGGAGTGTAAGGTATCCTTCGGCCCATGTCTTGCCGCGCGGACACTATTGTGCAGGACTTTCCTTGGCGCGAACCAACGCCGGCGGAGGGGAGGAAGGCGACCGGTGAGGGCTTTGTAATAACTCTATATCCCTACGCCAAGCCTAGCTCGAGGCTGTATCTTCCAA
ACCTTGCCTCTACGAGAAAGGCGATAGGCACCAACTCTTGGTTGTAAAGTGAATAGGGTAGGCCGGACCCTGGACAGTATCAATACTTTTGCTATACGGGTAGTACGCGCCGTCGGGTACGCGGTAGTAGCATCTTCTGCCTTGGTAACAAGTATAAAGCAAACACCCTATGCAGCCCTGAAACCCCACACAAGCTACTGTAAACAGCGATTGTTATAGACATCTAACTTGAACGTGTATACTTAACGTCGTATCAAAGGCTATGTAGATACTGTTCTGTATCCAACAGGTTAAAAGCTAACTCCTGTCACAGTCACGGGAATA
TAGCGCAAGTTGGAAGGATGCTGCTAAGCTAAATCCAGCCATGGCTCCCTTAATAGGTTAGGAGACTGTATCTCCTCACGCATCTAGTCAGGAGGAGCGCACAAGACTCGGTCTGCGACTAATCAATGGGCAACCTCATCGAGTGTTAAATATCCTTTAATCACAAATCATCTTTCCATCGGATCATTCAAGGAGGGCGTCGGCTACAGCCAGCGTAGTCTCACAGGCCCCGATTGTCCGATGGTTACAACGGCTATCCCATGCGCTGGCGTCATATGTTATCGTACTCCAAAAGCCGCGAGCCGCGACTAGTAAGGTGTTTAG
TTGTCAGACTGGATGCGCGCCAGGCTATAGAGCGATCAACGGGATTATGCTAGGAACCAATGGTGTATGTTTCTGTGAGGCGAACTGTCTTTTGTTCCATATGGGACACAGTTATTGCTGACCTTTCTACTCACATTCCCCTTGAACAAGCCAGTTTTACTAACGCTCTGGATCCTAGAAGGGAGCTATCACGTGTTCTGTAATGTTCCTATCCACCTTGCCACCCTTAACCGCGTGGCACGCCGGGTCTGTTTTCCACCAGTCTAACCACTGACAACCCCAGCGAGCACCCCGCCCCTCCGTCTCTCGAAGATTGATGTATGA
""".split()
best_score = 100000
best_motifs = []
print("!!!!!!!!!!!!!!!!!!!")
#print(gibbs_rand_motif_search(reads, 8, 5, 100))
#for i in range(20):
#    motifs, score = gibbs_rand_motif_search(reads, 15, 20, 2000)
#    if score < best_score:
#        best_motifs = motifs
#        best_score = score
#        print(best_score)
#for i in best_motifs:
#    print(i)


#reads2 = """TCTCGGGG
##            CCAAGGTG
#            TACAGGCG
#            TTCAGGTG""".split()
#profile = ThirdLesson.make_profile_w_Laplas_rule2(reads2, 8)

#read = reads[0]
#k = 8
#values = [read[i:i + k] for i in range(len(read) - k + 1)]
#print(ThirdLesson.consensus_str(profile))

#p_matrix = [ThirdLesson.profile_dist(kmer, profile) for kmer in values]
#biased_random(values, p_matrix, 1)
#print(p_matrix)
#print(sum(p_matrix))
#print(24/(8**4))
#print(profile)


reads = """AAGCCAAA
AATCCTGG
GCTACTTG
ATGTTTTG""".split()
reads = """ATGAGGTC
GCCCTAGA
AAATAGAT
TTGTGCTA""".split()

motifs = """GTC
CCC
ATA
GCT""".split()
profile = ThirdLesson.make_profile_w_Laplas_rule(motifs,3)
for read in reads:
    print(ThirdLesson.profile_most_probable_kmer(read, 3, profile))
print(2000*12/65)